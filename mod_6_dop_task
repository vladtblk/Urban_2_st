class Figure:
    filled = False
    sides_count = 0

    def __init__(self, color, *sides):
        self.__color = list(color)
        if sum(self.__color) != 0:
            self.filled = True
        self.__sides = list(sides)
        self.sides_count = len(self.__sides)

    def get_color(self):
        return self.__color

    def get_sides(self):
        return self.__sides

    def get_sides_count(self):
        return self.sides_count

    def is_valid_color(self, r,g,b):
        if r in range(0,256) and g in range(0,256) and b in range(0,256):
            return True

    def is_valid_sides(self, *args):
        for i in range(0, len(args)):
            if args[i] > 0 and isinstance(args[i],int) and i < (len(self.__sides) + 1):
                return True

    def set_color(self, r,g,b):
        if self.is_valid_color(r,g,b) == True:
            self.filled = True
            self.__color = [r,g,b]
            return self.__color
        else:
            print ("Введенны некорректные значения RGB")

    def set_sides(self, *new_sides):
        if self.is_valid_sides(*new_sides) is True and len(new_sides) == self.sides_count:
            self.__sides = new_sides
            return self.__sides

    def __len__(self):
        return sum(self.__sides)

class Circle(Figure):
    sides_count = 1

    def __init__(self,color, *sides):
        if len(sides) != 1:
            super().__init__(color, 1)
        else:
            super().__init__(color, *sides)
        self.radius = super().__len__() / (2 * 3.14159265)

    def get_square(self):
        return (super().__len__() ** 2) / (4 * 3.14159265)

class Triangle(Figure):
    sides_count = 3

    def __init__(self,color, *sides):
        # Проверка на условие, что сумма двух сторон всегда больше 3-ей, а также на количество передаваемых сторон
        if len(sides) != 3 or (sides[0] + sides[1] < sides[2]) or (sides[1] + sides[2] < sides[0]) or (sides[0] + sides[2] < sides[1]):
            super().__init__(color, 1,1,1)
        else:
            super().__init__(color, *sides)

    def get_square(self):
        a,b,c = self.get_sides()
        p = super().__len__() / 2
        square = (p * (p - a) * (p - b) * (p - c)) ** 0.5
        return square


class Cube(Figure):
    sides_count = 12

    def __init__(self, color, *sides):
        if len(sides) != 1:
            super().__init__(color, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
        else:
            super().__init__(color, *sides * 12)

    def get_volume(self):
        volume = (super().__len__() / 12) ** 3
        return volume

# Проверка
circle1 = Circle((200, 200, 100), 14,15) # (Цвет, стороны)
print(circle1.get_color())
cube1 = Cube((222, 35, 130), 6)
tri = Triangle((200,200,200),3,4,5)
print(tri.get_square())
print(tri.get_sides())

# Проверка на изменение цветов:
circle1.set_color(0, 0, 0) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
#cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(5,14) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))
print(circle1.get_sides_count())
# Проверка объёма (куба):
print(cube1.get_volume())
print(circle1.radius,
      circle1.get_square())
